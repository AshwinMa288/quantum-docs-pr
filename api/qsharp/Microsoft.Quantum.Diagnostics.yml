### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.diagnostics
name: Microsoft.Quantum.Diagnostics
summary: |2-
   # Summary
   This namespace contains functions and operations useful for diagnostic
   purposes, including assert operations and claim functions.
functions:
- uid: microsoft.quantum.diagnostics.allequalityfactb
  summary: Asserts that two arrays of boolean values are equal.
- uid: microsoft.quantum.diagnostics.allequalityfacti
  summary: Asserts that two arrays of integer values are equal.
- uid: microsoft.quantum.diagnostics.contradiction
  summary: Declares that a classical condition is false.
- uid: microsoft.quantum.diagnostics.dumpmachine
  summary: Dumps the current target machine's status.
- uid: microsoft.quantum.diagnostics.dumpregister
  summary: Dumps the current target machine's status associated with the given qubits.
- uid: microsoft.quantum.diagnostics.equalityfactb
  summary: Asserts that a classical Bool variable has the expected value.
- uid: microsoft.quantum.diagnostics.equalityfactc
  summary: Asserts that a complex number has the expected value.
- uid: microsoft.quantum.diagnostics.equalityfactcp
  summary: Asserts that a complex number has the expected value.
- uid: microsoft.quantum.diagnostics.equalityfacti
  summary: Asserts that a classical Int variable has the expected value.
- uid: microsoft.quantum.diagnostics.equalityfactl
  summary: Asserts that a classical BigInt variable has the expected value.
- uid: microsoft.quantum.diagnostics.equalityfactr
  summary: Asserts that a classical Result variable has the expected value.
- uid: microsoft.quantum.diagnostics.equalitywithintolerancefact
  summary: |-
    Represents the claim that a classical floating point value has the
    expected value up to a given
    absolute tolerance.
- uid: microsoft.quantum.diagnostics.fact
  summary: Declares that a classical condition is true.
- uid: microsoft.quantum.diagnostics.nearequalityfactc
  summary: |-
    Asserts that a classical complex number has the expected value up to a
    small tolerance of 1e-10.
- uid: microsoft.quantum.diagnostics.nearequalityfactcp
  summary: |-
    Asserts that a classical complex number has the expected value up to a
    small tolerance of 1e-10.
- uid: microsoft.quantum.diagnostics.nearequalityfactd
  summary: |-
    Asserts that a classical floating point value has the expected value up to a
    small tolerance of 1e-10.
operations:
- uid: microsoft.quantum.diagnostics.allowatmostncallsca
  summary: |-
    Between a call to this operation and its adjoint, asserts that
    a given operation is called at most a certain number of times.
- uid: microsoft.quantum.diagnostics.allowatmostnqubits
  summary: |-
    Between a call to this operation and its adjoint, asserts that
    at most a given number of additional qubits are allocated with
    using statements.
- uid: microsoft.quantum.diagnostics.assertallzero
  summary: Assert that given qubits are all in $\ket{0}$ state.
- uid: microsoft.quantum.diagnostics.assertallzerowithintolerance
  summary: Assert that given qubits are all in $\ket{0}$ state up to a given tolerance.
- uid: microsoft.quantum.diagnostics.assertmeasurement
  summary: |-
    Asserts that measuring the given qubits in the given Pauli basis will
    always have the given result.
- uid: microsoft.quantum.diagnostics.assertmeasurementprobability
  summary: |-
    Asserts that measuring the given qubits in the given Pauli basis will have the given result
    with the given probability, within some tolerance.
- uid: microsoft.quantum.diagnostics.assertoperationsequalinplace
  summary: Given two operations, asserts that they act identically for all input states.
- uid: microsoft.quantum.diagnostics.assertoperationsequalinplacecompbasis
  summary: |-
    Checks if the operation `givenU` is equal to the operation `expectedU` on
    the given input size  by checking the action of the operations only on
    the vectors from the computational basis.
    This is a necessary, but not sufficient, condition for the equality of
    two unitaries.
- uid: microsoft.quantum.diagnostics.assertoperationsequalreferenced
  summary: Given two operations, asserts that they act identically for all input states.
- uid: microsoft.quantum.diagnostics.assertphase
  summary: Asserts that the phase of an equal superposition state has the expected value.
- uid: microsoft.quantum.diagnostics.assertqubit
  summary: Asserts that the qubit `q` is in the expected eigenstate of the Pauli Z operator.
- uid: microsoft.quantum.diagnostics.assertqubitisinstatewithintolerance
  summary: Asserts that a qubit in the expected state.
- uid: microsoft.quantum.diagnostics.assertqubitwithintolerance
  summary: |-
    Asserts that the qubit `q` is in the expected eigenstate of the Pauli Z operator up to
    a given tolerance.
- uid: microsoft.quantum.diagnostics.dumpoperation
  summary: |-
    Given an operation, displays diagnostics about
    the operation that are made available by the current
    execution target.
newtypes:
- uid: microsoft.quantum.diagnostics.enabletestingvianame
  summary: |-
    Compiler-recognized attribute via which an alternative name can be defined
    that may be used when loading a type or callable for testing purposes.
- uid: microsoft.quantum.diagnostics.test
  summary: Compiler-recognized attribute used to mark a unit test.
...
